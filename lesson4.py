'''Домашнее задание к уроку 4 "Основы языка Python". Студент Абрамов Алексей
_______________________________________________________________________________
1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта
заработной платы сотрудника. Используйте в нём формулу:
                (выработка в часах * ставка в час) + премия.
Во время выполнения расчёта для конкретных значений необходимо запускать
скрипт с параметрами.
               МОДУЛЬ СО СКРИПТОМ - ФАЙЛ salary.py
_______________________________________________________________________________

2. Представлен список чисел. Необходимо вывести элементы исходного списка,
значения которых больше предыдущего элемента. Подсказка: элементы,
удовлетворяющие условию, оформить в виде списка. Для его формирования
используйте генератор. Пример исходного списка:
[300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123] '''

a = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
b = [a[i + 1] for i in range(len(a) - 1) if a[i + 1] > a[i]]
print(b)

'''____________________________________________________________________________
3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. 
Решите задание в одну строку.
Подсказка: используйте функцию range() и генератор.'''

a = [x for x in range(20, 240) if x % 20 == 0 or x % 21 == 0]

'''____________________________________________________________________________
4. Представлен список чисел. Определите элементы списка, не имеющие повторений. 
Сформируйте итоговый массив чисел, соответствующих требованию. Элементы выведите
 в порядке их следования в исходном списке. Для выполнения задания обязательно 
 используйте генератор. Пример исходного списка: 
 [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
 Результат: [23, 1, 3, 10, 4, 11]'''

a = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
b = [x for x in a if a.count(x) < 2]

'''____________________________________________________________________________
5. Реализовать формирование списка, используя функцию range() и возможности 
генератора. В список должны войти чётные числа от 100 до 1000 (включая границы).
 Нужно получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().'''

from functools import reduce

a = [x for x in range(100, 1001) if x % 2 == 0]
p = reduce(lambda x, y: x * y, a)

print("Сгенерированный список:", a)
print("Произведение всех элементов:", p)

'''____________________________________________________________________________
6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного;
б) итератор, повторяющий элементы некоторого списка, определённого заранее. 
Подсказка: используйте функцию count() и cycle() модуля itertools. 
Обратите внимание, что создаваемый цикл не должен быть бесконечным. 
Предусмотрите условие его завершения. #### Например, в первом задании выводим 
целые числа, начиная с 3. При достижении числа 10 — завершаем цикл. Вторым 
пунктом необходимо предусмотреть условие, при котором повторение элементов 
списка прекратится.'''

from itertools import count, cycle


# задание а)
def iter_z(start, stop):
    for i in count(start):
        if i <= stop:
            print(i)
        else:
            break


iter_z(3, 10)


# задание б)
def iter_cyc(pattern, n):
    i = 0
    for item in cycle(str(pattern)):
        if i < n:
            print(item)
            i += 1
        else:
            break


iter_cyc("RGB", 7)

'''____________________________________________________________________________
7. Реализовать генератор с помощью функции с ключевым словом yield, создающим 
очередное значение. При вызове функции должен создаваться объект-генератор. 
Функция вызывается следующим образом: for el in fact(n). Она отвечает за 
получение факториала числа. В цикле нужно выводить только первые n чисел, 
начиная с 1! и до n!. Подсказка: факториал числа n — произведение чисел от 1 
до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.'''

import math


def fact(n):
    for i in range(n):
        yield math.factorial(i + 1)


for el in fact(4):
    print(el)